#!/bin/bash

function update_nodejs {
  if [ -n "$NODE_VERSION_URL" ]; then
    local VERSION_URL=$NODE_VERSION_URL
  elif [ -f "$OPENSHIFT_REPO_DIR/.openshift/NODE_VERSION_URL" ]; then
    local VERSION_URL=$(cat $OPENSHIFT_REPO_DIR/.openshift/NODE_VERSION_URL)
  else
    local VERSION_URL="https://semver.io/node/unstable"
  fi

  local LATEST="v$(curl --silent --max-time 5 ${VERSION_URL})"
  local NODE_URL=https://nodejs.org/dist/${LATEST}/node-${LATEST}-linux-x64.tar.gz

  if [ "$LATEST" = "v" ]; then
    echo "Could not retrieve node version information from $VERSION_URL"
    return 1
  fi

  # Update Node.js if necessary

  which node >/dev/null 2>&1 # update if node is not avalible
  if [ $? != 0 ] || [ $(node --version) != ${LATEST} ]; then
    # Download
    if ! curl -L -o ${OPENSHIFT_DATA_DIR}tmp.tgz $NODE_URL; then
      return 1
    fi

    # Remove old files
    rm -rf ${OPENSHIFT_DATA_DIR}.nodejs

    # Copy binaries
    mkdir ${OPENSHIFT_DATA_DIR}.nodejs
    tar -xvzf ${OPENSHIFT_DATA_DIR}tmp.tgz --strip-components=1 -C ${OPENSHIFT_DATA_DIR}.nodejs

    # Remove downloaded archive
    rm ${OPENSHIFT_DATA_DIR}tmp.tgz

    # Output result
    echo "Node.js updated to $(node --version) with npm $(npm --version)."
  fi

  # Update global npm if necessary

  if [ -z "$NPM_VERSION_URL" ]; then
    if [ -f "$OPENSHIFT_REPO_DIR/.openshift/NPM_VERSION_URL" ]; then
      local NPM_VERSION_URL=$(cat $OPENSHIFT_REPO_DIR/.openshift/NPM_VERSION_URL)
    fi
  fi

  if [ -n "$NPM_VERSION_URL" ]; then
    local NPM_WANTED_VERSION=$(curl --silent --max-time 5 ${NPM_VERSION_URL})
  else
    local NPM_WANTED_VERSION=$(npm view npm version)
  fi

  if [ $NPM_WANTED_VERSION != $(npm --version) ]; then
    npm i -g npm@${NPM_WANTED_VERSION}
    echo "Npm updated to $(npm --version)."
  fi
}

function update_node_modules {
  local INIT_DIR=`pwd`
  cd ${OPENSHIFT_REPO_DIR}
  if [ -d ${OPENSHIFT_DATA_DIR}node_modules ]; then
    rm -rf ./node_modules
    mv -f ${OPENSHIFT_DATA_DIR}node_modules ./
    rm -rf ${OPENSHIFT_DATA_DIR}node_modules
  fi
  npm prune --production
  npm i --production
  cd ${INIT_DIR}
  client_result 'Node.js modules installed.'
}

function remote_version {
  local PACKAGE_URL="$(npm config get registry)$1/$2"
  local PACKAGE="$(curl --silent --max-time 5 "$PACKAGE_URL")"
  node --print --eval "($PACKAGE).version"
}

# Retrieve the installed version of the given global package (if any)
function local_version {
  NODE_PATH="${OPENSHIFT_DATA_DIR}.nodejs/lib/node_modules" \
    node --print --eval "require('$1/package.json').version" 2> /dev/null
}

function is_running {
  local PID="$(cat "$1" 2> /dev/null)"
  [ -n "$PID" ] && kill -0 "$PID" 2> /dev/null
}

# Update PM2
function update_pm2 {
  # Select the wanted PM2 version
  if [ -n "$PM2_VERSION" ]; then
    local WANTED="$PM2_VERSION"
  elif [ -f "${OPENSHIFT_REPO_DIR}.openshift/PM2_VERSION" ]; then
    local WANTED="$(cat "${OPENSHIFT_REPO_DIR}.openshift/PM2_VERSION")"
  else
    local WANTED="latest"
  fi

  local LATEST="$(remote_version pm2 "$WANTED")"

  if [ -z "$LATEST" ]; then
    echo "Could not retrieve PM2 version information from the npm registry"
    return 1
  fi

  # Do not update if not needed
  if [ "$(local_version pm2)" = "$LATEST" ]; then
    return
  fi

  # Prepare the PM2 home if needed
  if [ ! -L "$PM2_HOME/logs" ]; then
    mkdir -p "$PM2_HOME"
    ln -fs "${OPENSHIFT_LOG_DIR}pm2.log" "$PM2_HOME/pm2.log"
    rm -rf "$PM2_HOME/logs"
    ln -s "$OPENSHIFT_LOG_DIR" "$PM2_HOME/logs"
  fi

  # Update
  npm install -g "pm2@$LATEST"

  # Reload if needed
  if is_running "$PM2_HOME/pm2.pid"; then
    pm2 update
  fi

  # Output result
  echo "PM2 updated to $(local_version pm2)"
}

# Update Node.js, npm and PM2
function update_all {
  update_nodejs \
    && update_node_modules \
    && update_pm2
}